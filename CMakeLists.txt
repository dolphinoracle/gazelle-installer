cmake_minimum_required(VERSION 3.31 FATAL_ERROR)
if(CMAKE_BINARY_DIR PATH_EQUAL CMAKE_SOURCE_DIR)
    message(FATAL_ERROR
        "Build is in the same directory as the sources. Source tree will become heavily polluted.\n"
        "Delete the CMakeCache.txt file and CMakeFiles folder and use one of the supplied presets."
    )
endif()

project(minstall
    VERSION 6.0
    DESCRIPTION "Gazelle Installer for antiX Linux and MX Linux"
    LANGUAGES CXX
)

find_package(Qt6 6.8 REQUIRED COMPONENTS Core Gui Widgets LinguistTools)

if(CMAKE_GENERATOR STREQUAL "Ninja Multi-Config")
    set(CMAKE_DEFAULT_BUILD_TYPE "Release")
endif()
set(CMAKE_AUTORCC ON)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
#set(CMAKE_CXX_SCAN_FOR_MODULES ON)

qt_standard_project_setup()

qt_add_executable(minstall
    app.cpp
    autopart.cpp autopart.h
    base.cpp base.h
    bootman.cpp bootman.h
    checkmd5.cpp checkmd5.h
    core.cpp core.h
    crypto.cpp crypto.h
    minstall.cpp minstall.h
    mprocess.cpp mprocess.h
    msettings.cpp msettings.h
    mtreeview.cpp mtreeview.h
    oobe.cpp oobe.h
    partman.cpp partman.h
    passedit.cpp passedit.h
    replacer.cpp replacer.h
    swapman.cpp swapman.h
    images.qrc
)
qt_add_ui(minstall SOURCES
    meinstall.ui
)
#target_sources(minstall PRIVATE FILE_SET CXX_MODULES FILES
#    TODO: add files that are C++20 modules.
#)

qt_add_translations(minstall TS_FILES
    translations/gazelle-installer_en.ts
    LRELEASE_OPTIONS -compress -nounfinished -removeidentical -silent
)

target_link_libraries(minstall PRIVATE
    Qt::Core
    Qt::Gui
    Qt::Widgets
    zxcvbn
)

# Ensure autogenerated UI files can find source headers
target_include_directories(minstall PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}
)

# Get version from debian/changelog
execute_process(
    COMMAND dpkg-parsechangelog -SVersion
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    OUTPUT_VARIABLE pkg_version
    OUTPUT_STRIP_TRAILING_WHITESPACE
    RESULT_VARIABLE dpkg_result
)
if(NOT dpkg_result EQUAL 0)
    message(WARNING "Failed to get version from debian/changelog using dpkg-parsechangelog")
    set(pkg_version ${PROJECT_VERSION})
endif()

set(is_release $<OR:$<CONFIG:Release>,$<CONFIG:RelWithDebInfo>,$<CONFIG:MinSizeRel>>)
set(CMAKE_CXX_FLAGS_DEBUG "")
set(CMAKE_CXX_FLAGS_RELEASE "")
target_compile_definitions(minstall PRIVATE
    QT_DISABLE_DEPRECATED_UP_TO=0x060800
    CODEBASE_VERSION="${PROJECT_VERSION}"
    VERSION="${pkg_version}"
    $<${is_release}:NDEBUG>
)
target_compile_options(minstall PRIVATE
    -Wall
    -Wextra
    -Wpedantic
    -O2
    $<$<OR:$<CONFIG:Debug>,$<CONFIG:RelWithDebInfo>>:-gdwarf-4>
    $<${is_release}:
        $<$<CXX_COMPILER_ID:Clang>:-flto=thin>
        $<$<CXX_COMPILER_ID:GNU>:-flto=auto -fno-fat-lto-objects>
    >
)
target_link_options(minstall PRIVATE
    -O2
    $<${is_release}:
        $<$<CXX_COMPILER_ID:Clang>:-flto=thin>
        $<$<CXX_COMPILER_ID:GNU>:-flto=auto -fno-fat-lto-objects>
    >
)

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set_property(CACHE CMAKE_INSTALL_PREFIX PROPERTY VALUE "/usr")
endif()
include(GNUInstallDirs)
install(TARGETS minstall
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)
